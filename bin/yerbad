#!/usr/bin/env python
import argparse
import ConfigParser as configparser
import logging
import logging.config
import logging.handlers as loghandlers
import os
import sys

_path = os.path.dirname(__file__)
sys.path.insert(0, os.path.abspath(os.path.join(_path, '..')))
from yerba import (yerba, utils)

_defaults = {
    'port' : 5151,
    'log' : os.path.join(_path, 'yerba.log'),
    'access' : os.path.join(_path, 'yerba.access.log'),
    'level' : 'WARN',
    'debug' : True
}

config_paths = [
    '/etc/yerba/yerba.cfg',
    os.path.abspath(os.path.join(_path, '../yerba.cfg')),
]

def main(args=None):
    cfg = configparser.RawConfigParser(_defaults)

    try:
        config_paths.append(args['config'])
    except KeyError:
        pass
    finally:
        cfg.read(config_paths)

    # Setup Logging
    try:
        logging_conf = cfg.get('yerba', 'logging')
        logging.config.fileConfig(logging_conf)
        logger = logging.getLogger('yerba')
    except configparser.NoSectionError:
        logger = logging.getLogger('yerba')
        format_string = ('%(asctime)s %(name)s:%(lineno)s'
            '[%(levelname)s] %(message)s')

        fmt = logging.Formatter(format_string, datefmt='%m/%d/%Y %I:%M:%S')

        filehandler = loghandlers.TimedRotatingFileHandler(
                cfg.get('yerba', 'log'), 'midnight')

        filehandler.setLevel(logging.DEBUG)
        filehandler.setFormatter(fmt)

        streamhandler = logging.StreamHandler()
        streamhandler.setLevel(logging.DEBUG)
        streamhandler.setFormatter(fmt)

        logger.addHandler(streamhandler)
        logger.addHandler(filehandler)

    logger.setLevel(getattr(logging, cfg.get('yerba', 'level').upper(), None))
    yerba.listen_forever(cfg)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Processes bioinformatic jobs.')
    parser.add_argument('--port')
    parser.add_argument('--loglevel')
    parser.add_argument('--logging')
    parser.add_argument('--queue-prefix')
    parser.add_argument('--config')

    main(args = {k:v for k, v in vars(parser.parse_args()).items() if v})
